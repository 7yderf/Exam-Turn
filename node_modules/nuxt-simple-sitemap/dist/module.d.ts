import * as _nuxt_schema from '@nuxt/schema';

interface CreateFilterOptions {
    include?: (string | RegExp)[];
    exclude?: (string | RegExp)[];
}

type MaybeFunction<T> = T | (() => T);
type MaybePromise<T> = T | Promise<T>;
type SitemapEntry = SitemapFullEntry | string;
interface SitemapIndexEntry {
    sitemap: string;
    lastmod?: Date | string;
}
interface SitemapItemDefaults extends Omit<Partial<SitemapFullEntry>, 'loc'> {
}
type ResolvedSitemapEntry = Omit<SitemapFullEntry, 'url'> & Required<Pick<SitemapFullEntry, 'loc'>>;
type SitemapRoot = CreateFilterOptions & {
    defaults: SitemapItemDefaults;
    urls: MaybeFunction<MaybePromise<SitemapEntry[]>>;
};
interface NuxtSimpleSitemapRuntime extends ModuleOptions {
    hasApiRoutesUrl: boolean;
    isNuxtContentDocumentDriven: boolean;
    urls: SitemapEntry[];
    pagesDirs?: string[];
    extensions?: string[];
    hasPrerenderedRoutesPayload: boolean;
}
interface SitemapRenderCtx {
    sitemapName: string;
    urls: ResolvedSitemapEntry[];
}
type Changefreq = 'always' | 'hourly' | 'daily' | 'weekly' | 'monthly' | 'yearly' | 'never';
interface SitemapFullEntry {
    /**
     * @deprecated use `loc`
     */
    url?: string;
    loc?: string;
    lastmod?: string | Date;
    changefreq?: Changefreq;
    priority?: 0 | 0.1 | 0.2 | 0.3 | 0.4 | 0.5 | 0.6 | 0.7 | 0.8 | 0.9 | 1;
    alternatives?: Array<AlternativeEntry>;
    news?: GoogleNewsEntry;
    images?: Array<ImageEntry>;
    videos?: Array<VideoEntry>;
}
interface AlternativeEntry {
    hreflang: string;
    href: string | URL;
}
interface GoogleNewsEntry {
    title: string;
    date: Date | string;
    publicationName: string;
    publicationLanguage: string;
}
interface ImageEntry {
    loc: string | URL;
    caption?: string;
    geoLocation?: string;
    title?: string;
    license?: string | URL;
}
interface VideoEntry {
    title: string;
    thumbnailLoc: string | URL;
    description: string;
    contentLoc?: string | URL;
    playerLoc?: string | URL;
    duration?: number;
    expirationDate?: Date | string;
    rating?: number;
    viewCount?: number;
    publicationDate?: Date | string;
    familyFriendly?: boolean;
    restriction?: Restriction;
    platform?: Restriction;
    requiresSubscription?: boolean;
    uploader?: {
        name: string;
        info?: string | URL;
    };
    live?: boolean;
    tag?: string;
}
interface Restriction {
    relationship: 'allow' | 'deny';
    content: string;
}

interface ModuleOptions extends CreateFilterOptions, SitemapRoot {
    /**
     * Whether the sitemap.xml should be generated.
     *
     * @default true
     */
    enabled: boolean;
    /**
     * Should the URLs be inserted with a trailing slash.
     *
     * @default false
     */
    trailingSlash: boolean;
    siteUrl: string;
    autoLastmod: boolean;
    inferStaticPagesAsRoutes: boolean;
    sitemaps?: boolean | Record<string, Partial<SitemapRoot>>;
    /**
     * @deprecated use `siteUrl`
     */
    hostname?: string;
    /**
     * Path to the xsl that styles sitemap.xml.
     *
     * Set to `false` to disable styling.
     *
     * @default /__sitemap__/style.xsl
     */
    xsl: string | false;
    /**
     * When prerendering, should images be automatically be discovered and added to the sitemap.
     *
     * @default true
     */
    discoverImages: boolean;
    /**
     * Automatically add alternative links to the sitemap based on a prefix list.
     * Is used by @nuxtjs/i18n to automatically add alternative links to the sitemap.
     *
     * @default `false` or @nuxtjs/i18n `locales`
     */
    autoAlternativeLangPrefixes?: false | string[];
}
interface ModuleHooks {
    /**
     * @deprecated use `sitemap:prerender`
     */
    'sitemap:generate': (ctx: {
        urls: ResolvedSitemapEntry[];
    }) => Promise<void> | void;
    'sitemap:prerender': (ctx: {
        urls: ResolvedSitemapEntry[];
    }) => Promise<void> | void;
}
declare const _default: _nuxt_schema.NuxtModule<ModuleOptions>;

export { AlternativeEntry, Changefreq, GoogleNewsEntry, ImageEntry, MaybeFunction, MaybePromise, ModuleHooks, ModuleOptions, NuxtSimpleSitemapRuntime, ResolvedSitemapEntry, Restriction, SitemapEntry, SitemapFullEntry, SitemapIndexEntry, SitemapItemDefaults, SitemapRenderCtx, SitemapRoot, VideoEntry, _default as default };
